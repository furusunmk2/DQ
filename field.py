import random
from game import Game
from chip import Chip
from chara import Chara
from charalist import CharaList
# フィールドクラス（マップの１画面分のクラス）
class Field:
    mapnumber = 1
    QUAKE = 0
    MAP5_flg2 = 0
    # 関数：コンストラクタ
    def __init__(self):
        # Ａ－１９Chipから）フィールドのチップのリスト
        self.chip_list = None
        # Ａ－２０）マップ番号に初期値を設定
        self.map_no = Game.START_FIELD
        # Ａ－２１）表示用のチップ（マス）の２重リストを作成
        self.chip_list = [[Chip() for _ in range(Game.FIELD_WIDTH)] \
                           for _ in range(Game.FIELD_HEIGHT)]
        # Ａ－２２）チップリストの数だけ２重ループ
        for y in range(Game.FIELD_HEIGHT):
            for x in range(Game.FIELD_WIDTH):
                # Ａ－２３）位置と初期画像を指定
                self.chip_list[y][x].set_pos(x, y)
                self.chip_list[y][x].set_chip_no(0)
        # Ｂ－２８最初）マップ番号に対応した情報を設定
        self.read_map_info()

    # 描画をする
    def draw(self):
        # Ａ－２４）チップリストの数だけ２重ループ
        for y in range(Game.FIELD_HEIGHT):
            for x in range(Game.FIELD_WIDTH):
                # Ａ－２５mainへ）そのチップの描画をする
                self.chip_list[y][x].draw()
        
    # フィールド情報の読み込み
    def read_map_info(self):
        # Ｂ－２９）フィールド情報の設定
        new_field = Field.MAP_LIST[self.map_no]
        # Ｂ－３０）チップリストの数だけ２重ループ
        for y in range(Game.FIELD_HEIGHT):
            for x in range(Game.FIELD_WIDTH):
                # Ｂ－３１最後）フィールドの該当位置の情報を設定
                self.chip_list[y][x].set_chip_no(new_field[y][x])

    # フィールドチェンジ
    # （移動方向をfld_x, fld_yのプラスマイナス１でもらう）
    def change_field(self, fld_x, fld_y):
        Field.mapnumber = self.map_no
        # マップ数
        map_count = Game.MAP_COUNT
        # Ｆ－６１）左右移動後の位置がそのまま計算すると
        # 上下のフィールドになってしまう場合は、
        # １始まりなので１を引いてから割って比較）
        if (self.map_no - 1) // Game.MAP_WIDTH != \
           (self.map_no + fld_x - 1) // Game.MAP_WIDTH:
            # Ｆ－６２）フィールドの横の数－１だけ、逆方向に移動
            self.map_no += (Game.MAP_WIDTH - 1) * (fld_x * -1)
        # Ｆ－６３）そうでない場合
        else:
            # Ｆ－６４）マップNoを指定値加算
            self.map_no += fld_x
        
        # Ｆ－６５）上下に移動した場合は「横マップ数」を足す／引く
        self.map_no += fld_y * Game.MAP_WIDTH

        # Ｆ－６６）フィールド数を超えた場合は、マップ数を引く
        if self.map_no > map_count:
            self.map_no -= map_count
        # Ｆ－６７）０以下になった場合は、マップ数を足す
        elif self.map_no <= 0:
            self.map_no += map_count
        # Ｆ－６８Playerへ）フィールド情報を再読み込み
        self.read_map_info()
        
        # Ｊ－１２６Squareから）モンスターの再配置
        for m_no,chara in enumerate(Game.charas):                  
            # Ｊ－１２７）マスのピッタリの位置に配置する
            if self.QUAKE == 2:
                if self.map_no in [4,5,6,1,2,3]: 
                    continue
            if self.QUAKE == 6:
                if self.map_no in [4,5,6,2,10]:
                    continue
            if self.map_no ==  4:
                if m_no == 1 or m_no == 2 or m_no == 3 or m_no == 4 or m_no == 0:
                    continue
            if self.map_no ==  5:
                if m_no == 4  or m_no == 5 or m_no ==6 or m_no == 3:
                    continue    
            if self.map_no ==  6:
                if m_no == 1 or m_no == 2 or m_no == 0 or m_no ==6 or m_no == 5:
                    continue
            if not self.map_no ==  2:
                if m_no == 8 or m_no == 9 or m_no == 10 or m_no ==11 or m_no == 12 or m_no == 13 or m_no == 14 or m_no == 15 or m_no ==16 or m_no == 17:
                    continue
            if self.map_no ==  2:
                if m_no == 0 or m_no == 1 or m_no == 2 or m_no ==3 or m_no == 4 or m_no == 5 or m_no == 6 or m_no ==7 :
                    continue   
            if self.map_no ==  1:
                if m_no == 0 or m_no == 1 or m_no == 2 or m_no ==3 or m_no == 4 or m_no == 5 or m_no == 6 or m_no ==7 :
                    continue
            dx, dy = 0, 0
            # Ｊ－１２８）配置できるまでループする
            # （※無限ループしてしまわないように、100回で諦める）
            for _ in range(200):
                # Ｊ－１２９）プレイヤーが端からくるので、外側の２マスには配置しない
                posx = random.randint(2, Game.FIELD_WIDTH - 3)
                posy = random.randint(2, Game.FIELD_HEIGHT - 3)
                # Ｊ－１３０）モンスターが移動できない位置に配置されてしまった場合はやり直し
                if not chara.check_chara_move(posx, posy, dx, dy,
                                                chara.unmovable_chips):
                    continue
                # Ｊ－１３１Charaへ）移動できる位置ならそこに配置
                chara.set_pos(posx, posy)
                chara.set_dpos(dx, dy)
            
                
    # 移動可能チェック
    def check_movable(self, pos_list, unmovable_chip_list):
        # Ｇ－８２最初）チェック対象だけ繰り返し
        for pos in pos_list:
            # Ｇ－８３）位置のx, yを取得
            x, y = pos[0], pos[1]
            # Ｇ－８４）その位置のチップNoを取得
            chip_no = self.chip_list[y][x].chip_no
            # Ｇ－８５）それが移動不可ならFalseを返却
            if chip_no in unmovable_chip_list:
                return False
        # Ｇ－８６Characterへ）すべての対象チップが移動可能な場合はTrueを返却
        return True
    # 毒の沼filed_epi_list
    def check_filed_damege(self, pos_list, filed_damege_list):
        # Ｇ－８２最初）チェック対象だけ繰り返し
        for pos in pos_list:
            # Ｇ－８３）位置のx, yを取得
            x, y = pos[0], pos[1]
            # Ｇ－８４）その位置のチップNoを取得
            chip_no = self.chip_list[y][x].chip_no
            if chip_no in filed_damege_list:
                return False
                
        # Ｇ－８６Characterへ）すべての対象チップが移動可能な場合はTrueを返却
        return True
# 宝箱
    def check_filed_epi(self, pos_list, filed_epi_list):
        # Ｇ－８２最初）チェック対象だけ繰り返し
        for pos in pos_list:
            # Ｇ－８３）位置のx, yを取得
            x, y = pos[0], pos[1]
            # Ｇ－８４）その位置のチップNoを取得
            chip_no = self.chip_list[y][x].chip_no
            if chip_no in filed_epi_list:
                return False
                
        # Ｇ－８６Characterへ）すべての対象チップが移動可能な場合はTrueを返却
        return True
# 落とし物
    def check_filed_otoshichao(self, pos_list, filed_otoshichao_list):
        # Ｇ－８２最初）チェック対象だけ繰り返し
        for pos in pos_list:
            # Ｇ－８３）位置のx, yを取得
            x, y = pos[0], pos[1]
            # Ｇ－８４）その位置のチップNoを取得
            chip_no = self.chip_list[y][x].chip_no
            if chip_no in filed_otoshichao_list:
                return False
                
        # Ｇ－８６Characterへ）すべての対象チップが移動可能な場合はTrueを返却
        return True    
# ドア
    def check_filed_door(self, pos_list, filed_door_list):
        # Ｇ－８２最初）チェック対象だけ繰り返し
        for pos in pos_list:
            # Ｇ－８３）位置のx, yを取得
            x, y = pos[0], pos[1]
            # Ｇ－８４）その位置のチップNoを取得
            chip_no = self.chip_list[y][x].chip_no
            if chip_no in filed_door_list:
                return False
                
        # Ｇ－８６Characterへ）すべての対象チップが移動可能な場合はTrueを返却
        return True    
    

    # クラス変数：マップ情報
    MAP1 = [
        [1,1,1,1,14,99,17,17,17,14,14,14,1,1,1],
        [1,1,1,1,14,99,17,17,17,14,14,14,1,76,76],
        [1,1,1,1,14,99,17,17,17,14,14,14,1,76,76],
        [1,1,1,1,14,99,17,17,35,14,14,14,1,76,76],
        [1,1,1,1,65,66,48,48,68,67,14,14,1,76,76],
        [1,1,1,1,14,99,75,75,75,75,75,75,76,76,76],
        [1,1,1,1,14,99,75,75,75,75,75,75,76,76,76],
        [1,1,1,1,14,99,75,75,75,75,75,75,76,76,76],
        [1,1,1,1,65,66,17,17,35,14,14,14,1,17,17],
        [1,1,1,1,14,17,17,17,17,14,14,14,1,17,17],
        [1,1,1,1,14,17,17,17,17,14,14,14,1,17,17],
        [1,1,1,1,14,17,17,17,35,14,14,14,1,17,29],
        [1,1,1,1,14,34,17,17,17,14,14,14,1,17,17],
        [14,14,14,14,14,17,17,17,17,14,14,14,14,14,14], 

    ]
    MAP2 = [
        [104,104,104,104,104,104,104,104,104,104,104,104,104,104,104],
        [105,105,105,105,105,105,105,105,105,105,105,105,105,105,104],
        [74,74,74,74,74,74,74,74,74,74,74,74,74,105,104],
        [74,74,74,74,74,74,74,74,74,74,74,74,74,105,104],
        [74,74,74,74,74,74,74,74,74,74,74,74,74,105,104],
        [74,74,74,74,74,74,74,74,74,74,74,74,74,105,104],
        [74,74,74,74,74,74,74,74,74,74,74,74,74,105,104],
        [74,74,74,74,74,74,74,74,74,74,74,74,74,105,104],
        [105,105,105,105,105,105,105,105,105,105,105,105,105,105,104],
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,104],
        [31,30,41,40,8,17,17,17,8,8,31,30,21,20,104], 
        [33,32,43,42,0,17,17,17,0,8,33,32,23,22,104],
        [21,20,31,30,8,17,17,17,8,8,21,20,41,40,104], 
        [23,22,33,32,0,17,17,17,0,8,23,22,43,42,104],     
    ]
    MAP3= [
        [14,43,42,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,21,20,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,23,22,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,31,30,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,33,32,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,41,40,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,43,42,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,21,20,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,23,22,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,31,30,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,33,32,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,41,40,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,43,42,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,14,14,14,0,0,0,8,8,12,54,54,54,12,8], 
    ]
    MAP4 = [
        [14,14,14,14,14,0,0,0,0,14,14,14,14,14,14,14], 
        [17,17,17,17,17,17,17,17,17,17,17,17,17,17,17], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,14,14,14,14,14,14,14,14,14,14], 
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,13,13,13,13,13,13,13,13,13,13,13,13,13,13], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
    ]
    MAP4_alt = [
        [14,14,14,14,14,0,0,0,14,14,14,14,14,14,14,14], 
        [17,17,17,17,17,17,17,17,17,17,17,17,17,17,17], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,14,14,14,14,14,14,14,14,14,14], 
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], 
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [13,13,13,13,13,13,13,13,13,13,13,13,13,13,13], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
    ]
    MAP4_alt2= [
        [14,14,14,14,14,14,14,0,0,0,14,14,14,14,14,14], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,14,14,14,14,14,14,14,14,14,14], 
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], 
        [12,12,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,12,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,12,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,12,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,12,13,13,13,13,13,13,13,13,13,13,13,13,13], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
    ]
    MAP4_new= [
        [14,14,14,14,14,14,0,0,0,14,14,14,14,14,14,14], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,14,14,14,14,14,14,14,14,14,14], 
        [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,2,2,2,2,2,2,2,2,2,2,2,2,2,26], 
        [12,13,13,13,13,13,13,13,13,13,13,13,13,13,13], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
    ]

    MAP5 = [ 
        [14,14,14,14,14,14,17,17,17,14,14,14,14,14,14,14], 
        [85,85,85,85,85,99,85,85,85,85,85,85,85,85,85], 
        [86,86,86,86,86,86,86,86,86,86,86,86,86,86,86], 
        [84,84,84,84,84,84,84,84,84,84,84,84,84,84,84], 
        [14,14,14,14,14,14,75,75,75,14,14,14,14,14,14], 
        [10,10,10,10,10,10,45,45,45,10,10,10,10,10,10], 
        [26,87,87,87,87,87,87,87,87,87,87,87,87,87,26], 
        [26,87,87,87,87,87,87,87,87,87,87,87,87,87,26], 
        [26,87,87,87,87,87,87,87,87,87,87,87,87,87,26], 
        [26,87,87,87,87,87,87,87,87,87,87,87,87,87,26], 
        [88,88,88,88,88,88,88,88,88,88,88,88,88,88,88], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
    ]
    MAP6 = [
        [14,14,14,14,0,0,0,8,8,12,54,54,54,12,14], 
        [17,17,17,17,17,17,17,17,17,17,17,17,17,17,17], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,14,14,14,14,12,54,54,54,12,14], 
        [10,10,10,10,10,10,10,10,10,12,54,54,54,12,10], 
        [26,2,2,2,2,2,2,2,2,12,54,54,54,12,2], 
        [26,2,2,2,2,2,2,2,2,12,54,54,54,12,2], 
        [26,2,2,2,2,2,2,2,2,12,54,54,54,12,2], 
        [26,2,2,2,2,2,2,2,2,12,54,54,54,12,2], 
        [13,13,13,13,13,13,13,13,13,12,54,54,54,12,13], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54], 
        [54,54,54,54,54,54,54,54,54,54,54,54,54,54,54],
    ]
    MAP7 = [
        [18,18,18,19,19,19,19,19,19,19,19,19,18,18,18], 
        [18,18,18,19,19,19,19,19,19,19,19,19,18,18,18], 
        [18,18,14,19,19,25,19,19,19,25,19,19,14,18,18], 
        [18,1,14,0,0,0,0,0,0,0,0,0,14,1,18], 
        [1,1,14,2,2,2,2,2,2,2,2,2,14,1,1], 
        [1,1,14,2,2,2,2,2,2,2,2,2,14,1,1], 
        [1,1,14,2,2,2,2,2,2,2,2,2,14,1,1], 
        [1,1,14,2,2,2,2,2,2,2,2,2,14,1,1], 
        [1,1,10,10,10,10,11,11,11,10,10,10,10,1,1], 
        [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [1,1,0,16,16,16,16,16,16,16,16,16,16,16,16], 
        [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [1,8,8,8,8,8,8,8,8,8,8,8,8,8,8],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    ]
    MAP8 = [
        [18,18,18,18,18,18,18,18,18,18,18,18,18,18,18], 
        [18,18,18,18,18,18,18,18,18,18,18,18,18,18,18], 
        [1,1,1,1,1,18,18,18,18,18,18,18,18,18,18],
        [1,1,1,1,1,1,1,1,18,18,18,18,18,18,18],
        [1,1,1,1,1,1,1,1,1,18,18,18,18,18,18],
        [1,1,1,1,1,1,1,1,1,0,0,1,1,18,18],
        [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,0,0,1,1,1,1],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [8,8,8,8,8,8,8,8,8,0,0,8,8,8,8],
    ]
    MAP9 = [
        [1,1,1,1,1,1,1,1,1,12,54,54,54,12,1], 
        [1,0,0,0,17,17,17,8,8,12,54,54,54,12,1], 
        [1,0,0,0,17,17,17,8,8,12,54,54,54,12,1], 
        [1,21,20,8,17,17,17,8,8,12,54,54,54,12,1], 
        [1,23,22,0,17,17,17,8,8,12,54,54,54,12,1], 
        [1,31,30,8,17,17,17,8,8,12,54,54,54,12,1], 
        [1,33,32,0,17,17,17,8,8,12,54,54,54,12,1], 
        [1,41,40,8,17,17,17,8,8,12,54,54,54,12,1], 
        [1,43,42,0,17,17,17,8,8,12,54,54,54,12,1], 
        [1,10,10,10,11,11,10,10,10,12,54,54,54,12,1], 
        [1,12,12,12,11,11,12,12,12,12,54,54,54,12,1], 
        [0,0,0,0,0,0,0,0,0,0,0,54,0,0,0], 
        [16,16,16,16,16,16,16,16,16,16,16,54,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,54,0,0,0], 
    ]
    
    MAP10 = [
        [14,14,31,30,8,17,17,17,17,8,8,21,20,14,14], 
        [14,14,33,32,0,17,17,17,17,0,8,23,22,14,14], 
        [14,14,41,40,8,17,17,17,17,8,8,31,30,14,14], 
        [14,14,43,42,0,17,17,17,17,0,8,33,32,14,14], 
        [14,14,14,14,14,17,17,17,17,14,14,14,14,14,14],        
        [4,17,17,17,17,17,17,17,17,17,17,17,17,17,17], 
        [16,4,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [4,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,17,17,17,17,14,14,14,14,14,14], 
        [14,14,31,30,8,17,17,17,17,8,8,21,20,14,14], 
        [14,14,33,32,0,17,17,17,17,0,8,23,22,14,14], 
        [14,14,41,40,8,17,17,17,17,8,8,31,30,14,14], 
        [14,14,43,42,0,17,17,17,17,0,8,33,32,14,14], 
        [14,14,14,14,14,17,17,17,17,14,14,14,14,14,14], 
    ]
    
    MAP11 = [
        [14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],
        [14,14,31,30,8,17,17,17,17,8,8,21,20,14,14], 
        [14,14,33,32,0,17,17,17,17,0,8,23,22,14,14], 
        [14,14,41,40,8,17,17,17,17,8,8,31,30,14,14], 
        [14,14,43,42,0,17,17,17,17,0,8,33,32,14,14], 
        [14,14,14,14,14,17,17,17,17,14,14,14,14,14,14],        
        [17,17,17,17,17,17,17,17,17,17,17,17,17,17,17], 
        [16,16,16,16,16,16,16,16,16,16,16,16,16,16,16], 
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
        [14,14,14,14,14,17,17,17,17,14,14,14,14,14,14], 
        [14,14,31,30,8,17,17,17,17,8,8,21,20,14,14], 
        [14,14,33,32,0,17,17,17,17,0,8,23,22,14,14], 
        [14,14,41,40,8,17,17,17,17,8,8,31,30,14,14], 
        [14,14,43,42,0,17,17,17,17,0,8,33,32,14,14], 
    ]
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], 
    MAP12 = [
        [14,43,42,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,21,20,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,23,22,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,31,30,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,33,32,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,41,40,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,43,42,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,21,20,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,23,22,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,31,30,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,33,32,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,41,40,8,17,17,17,8,8,12,54,54,54,12,8], 
        [14,43,42,0,17,17,17,8,8,12,54,54,54,12,8], 
        [14,14,14,14,0,0,0,8,8,12,54,54,54,12,8], 
    ]

    MAP_LIST = (0, MAP1, MAP2, MAP3, MAP4, MAP5, MAP6, MAP7, MAP8, MAP9, MAP10, MAP11, MAP12)
    MAP_LIST_ALT = (MAP4_alt,MAP4_alt2)
